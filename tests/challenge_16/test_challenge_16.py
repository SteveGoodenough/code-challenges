from code_challenge_16.challenge_16 import number_to_roman, roman_to_number, add_two_roman_numerals
import pytest


test_data =[
    (1, "I"),
    (2, "II"),
    (3, "III"),
    (4, "IV"),
    (5, "V"),
    (6, "VI"),
    (7, "VII"),
    (8, "VIII"),
    (9, "IX"),
    (10, "X"),
    (11, "XI"),
    (12, "XII"),
    (13, "XIII"),
    (14, "XIV"),
    (15, "XV"),
    (16, "XVI"),
    (17, "XVII"),
    (18, "XVIII"),
    (19, "XIX"),
    (20, "XX"),
    (21, "XXI"),
    (22, "XXII"),
    (23, "XXIII"),
    (24, "XXIV"),
    (25, "XXV"),
    (20, "XX"),
    (25, "XXV"),
    (30, "XXX"),
    (35, "XXXV"),
    (40, "XL"),
    (45, "XLV"),
    (50, "L"),
    (55, "LV"),
    (60, "LX"),
    (65, "LXV"),
    (70, "LXX"),
    (75, "LXXV"),
    (80, "LXXX"),
    (85, "LXXXV"),
    (90, "XC"),
    (95, "XCV"),
    (100, "C"),
    (105, "CV"),
    (110, "CX"),
    (115, "CXV"),
    (120, "CXX"),
    (125, "CXXV"),
    (130, "CXXX"),
    (135, "CXXXV"),
    (140, "CXL"),
    (100, "C"),
    (125, "CXXV"),
    (150, "CL"),
    (175, "CLXXV"),
    (200, "CC"),
    (225, "CCXXV"),
    (250, "CCL"),
    (275, "CCLXXV"),
    (300, "CCC"),
    (325, "CCCXXV"),
    (350, "CCCL"),
    (375, "CCCLXXV"),
    (400, "CD"),
    (425, "CDXXV"),
    (450, "CDL"),
    (475, "CDLXXV"),
    (500, "D"),
    (525, "DXXV"),
    (550, "DL"),
    (575, "DLXXV"),
    (600, "DC"),
    (625, "DCXXV"),
    (650, "DCL"),
    (675, "DCLXXV"),
    (700, "DCC"),
    (750, "DCCL"),
    (800, "DCCC"),
    (825, "DCCCXXV"),
    (900, "CM"),
    (975, "CMLXXV"),
    (1000, "M"),
    (1050, "ML"),
    (1125, "MCXXV"),
    (1200, "MCC"),
    (1275, "MCCLXXV"),
    (1350, "MCCCL"),
    (1425, "MCDXXV"),
    (1500, "MD"),
    (1575, "MDLXXV"),
    (1650, "MDCL"),
    (1725, "MDCCXXV"),
    (1800, "MDCCC"),
    (1875, "MDCCCLXXV"),
    (1950, "MCML"),
    (2025, "MMXXV"),
    (2100, "MMC"),
    (2175, "MMCLXXV"),
    (2250, "MMCCL"),
    (2325, "MMCCCXXV"),
    (2400, "MMCD"),
    (2475, "MMCDLXXV"),
    (2550, "MMDL"),
    (14, "XIV"),
    (79, "LXXIX"),
    (225, "CCXXV"),
    (845, "DCCCXLV"),
    (2022, "MMXXII"),
    (2019, "MMXIX"),
    (0, "")]


@pytest.mark.parametrize("number, roman", test_data)
def test_convert_a_number_to_roman_numeral(number, roman):
    assert number_to_roman(number) == roman


@pytest.mark.parametrize("number, roman", test_data)
def test_convert_roman_numeral_to_a_number(number, roman):
    assert roman_to_number(roman) == number


def test_add_two_roman_numerals():
    assert add_two_roman_numerals("I", "I") == "II"
    assert add_two_roman_numerals("V", "V") == "X"
    assert add_two_roman_numerals("IV", "V") == "IX"
    assert add_two_roman_numerals("CCXXV", "MCC") == "MCDXXV"
    assert add_two_roman_numerals("XLII", "CXXIII") == "CLXV"
